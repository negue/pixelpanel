{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import {_range} from \"./_range\";\n  import {Options} from \"./options\";\n  import  {Twitch} from './twitch';\n  import {PixelState} from \"./pixel.state\";\n  import {CommandHandler} from \"./command-handler\";\n  import {stringToObject} from \"./utils\";\n\n  const options = new Options();\n\n  const cellDirection = options.getDirection();\n  const cellSize = options.getCellSize();\n  const cellGap = options.getCellGap();\n  const shadow = options.getShadow();\n\n  const twitch = new Twitch(options.getChannel());\n\n  const pixelz = new PixelState(options.getCells());\n  const commandHandler = new CommandHandler(pixelz);\n\n  twitch.commandReceived$.subscribe(command =>  {\n    if (!command) {\n      return;\n    }\n\n    commandHandler.handle(command);\n  })\n\n  const cellValues$ = pixelz.pixelStore$;\n\n //  value\n\n  let maxCells = options.getCells();\n  let currentCell = 0; // to add\n\n  function increaseByThen() {\n    maxCells += 10;\n  }\n\n  // Key = Index, Value any color\n\n  function fillRandomColors() {\n    cellValues$.update(value => {\n      for (let i = 0; i < maxCells; i++) {\n        value[i] = getRandomRgb();\n      }\n\n\n      return value; // todo refactor\n    })\n  }\n\n  function getRandomRgb() {\n    var num = Math.round(0xffffff * Math.random());\n    var r = num >> 16;\n    var g = num >> 8 & 255;\n    var b = num & 255;\n    return 'rgb(' + r + ', ' + g + ', ' + b + ')';\n  }\n\n  // TODO clean up\n  function moveColorsByOne () {\n    // 0 to 1\n    // 1 to 2\n    cellValues$.update(value => {\n      for (let i = maxCells; i >= 0; i--) {\n        value[i + 1] = value[i];\n      }\n\n      return value; // todo refactor\n    });\n  }\n\n  function fillNewCellWithColor() {\n    moveColorsByOne();\n    cellValues$.update(value => {\n      value[0] = getRandomRgb();\n\n      return value; // todo refactor\n    });\n  }\n\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  async function rainbow() {\n    for (let i = 0; i < maxCells; i++) {\n      fillNewCellWithColor();\n      await sleep(50);\n    }\n  }\n\n\n\n\n  let cellValues = {};\n\n  const unsubscribe = cellValues$.subscribe(value => {\n    if (!value) {\n      return;\n    }\n\n    const newValues = stringToObject(value);\n\n    cellValues = newValues;\n  });\n\n  async function _initAll () {\n    await pixelz.init();\n    // console.warn('ADD RANDOM');\n    // pixelz.addPixel('pixel:add=random');\n  }\n\n  _initAll();\n</script>\n\n<main>\n <!--\n  <button on:click={fillNewCellWithColor}>\n    New Color\n  </button>\n\n  <button on:click={rainbow}>\n    Fill Random after a time\n  </button>\n\n  <button on:click={increaseByThen}>\n    Add 10 Cells\n  </button>\n\n  <button on:click={fillRandomColors}>\n    Fill randomv\n  </button>\n\n  { maxCells }\n-->\n  <div class=\"cell-holder {cellDirection}\"\n       style=\"--cell-size: {cellSize}; --cell-gap: {cellGap}\"\n  >\n\n    {#each _range(0, maxCells, 1) as i}\n      <div style=\"background: {(cellValues[i] && cellValues[i].color) || 'inherited'}\"\n           data-index=\"{i}\"\n           class=\"cell {(cellValues[i] && cellValues[i].color)} {shadow && 'shadow'}\">\n        {#if (cellValues[i] && cellValues[i].emote != null)}\n          <img src=\"https://static-cdn.jtvnw.net/emoticons/v1/{cellValues[i].emote}/2.0\">\n        {/if}\n      </div>\n    {/each}\n\n  </div>\n</main>\n\n<style lang=\"scss\">.row {\n  flex-direction: row; }\n\n.column {\n  flex-direction: column; }\n\n.cell-holder {\n  display: flex;\n  flex-wrap: wrap;\n  min-height: 450px;\n  width: 90%;\n  max-height: 85vh;\n  align-content: flex-start; }\n\n.cell {\n  background: gray;\n  width: var(--cell-size, 40px);\n  height: var(--cell-size, 40px);\n  margin-right: var(--cell-gap, 5px);\n  margin-bottom: var(--cell-gap, 5px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 1s, background-color 2s; }\n  .cell img {\n    width: calc(var(--cell-size) - 5px);\n    height: calc(var(--cell-size) - 5px);\n    object-fit: contain; }\n\n.cell.shadow {\n  box-shadow: 1px 1px 2px 1px rgba(0, 0, 0, 0.45); }\n\n.random {\n  background-image: -webkit-linear-gradient(92deg, #f35626, #feab3a);\n  -webkit-animation: hue 4s infinite linear; }\n\n@-webkit-keyframes hue {\n  from {\n    -webkit-filter: hue-rotate(0deg); }\n  to {\n    -webkit-filter: hue-rotate(360deg); } }\n\n/*# sourceMappingURL=App.svelte.css.map */</style>\n"
  ],
  "names": [],
  "mappings": "AAyJmB,IAAI,4BAAC,CAAC,AACvB,cAAc,CAAE,GAAG,AAAE,CAAC,AAExB,OAAO,4BAAC,CAAC,AACP,cAAc,CAAE,MAAM,AAAE,CAAC,AAE3B,YAAY,4BAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,UAAU,AAAE,CAAC,AAE9B,KAAK,4BAAC,CAAC,AACL,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,WAAW,CAAC,KAAK,CAAC,CAC7B,MAAM,CAAE,IAAI,WAAW,CAAC,KAAK,CAAC,CAC9B,YAAY,CAAE,IAAI,UAAU,CAAC,IAAI,CAAC,CAClC,aAAa,CAAE,IAAI,UAAU,CAAC,IAAI,CAAC,CACnC,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,UAAU,CAAE,GAAG,CAAC,EAAE,CAAC,CAAC,gBAAgB,CAAC,EAAE,AAAE,CAAC,AAC1C,mBAAK,CAAC,GAAG,cAAC,CAAC,AACT,KAAK,CAAE,KAAK,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACnC,MAAM,CAAE,KAAK,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,UAAU,CAAE,OAAO,AAAE,CAAC,AAE1B,KAAK,OAAO,4BAAC,CAAC,AACZ,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,AAAE,CAAC,AAEpD,OAAO,4BAAC,CAAC,AACP,gBAAgB,CAAE,wBAAwB,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAClE,iBAAiB,CAAE,iBAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,AAAE,CAAC,AAE9C,mBAAmB,iBAAI,CAAC,AACtB,IAAI,AAAC,CAAC,AACJ,cAAc,CAAE,WAAW,IAAI,CAAC,AAAE,CAAC,AACrC,EAAE,AAAC,CAAC,AACF,cAAc,CAAE,WAAW,MAAM,CAAC,AAAE,CAAC,AAAC,CAAC"
}